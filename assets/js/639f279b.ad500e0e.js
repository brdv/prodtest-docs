"use strict";(self.webpackChunkprodtest=self.webpackChunkprodtest||[]).push([[69],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(a),h=o,m=c["".concat(l,".").concat(h)]||c[h]||d[h]||r;return a?n.createElement(m,i(i({ref:t},p),{},{components:a})):n.createElement(m,i({ref:t},p))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<r;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},3730:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var n=a(7462),o=(a(7294),a(3905));const r={title:"Data Separation"},i=void 0,s={unversionedId:"tip-basics/dark-launch/data-separation",id:"tip-basics/dark-launch/data-separation",title:"Data Separation",description:"As mentioned on the Dark Launch page there are different ways an application cal collect and store data. For this guide, we will stick to the ways that are used in the prodtest-demo project: a database and a message queue.",source:"@site/docs/tip-basics/dark-launch/data-separation.md",sourceDirName:"tip-basics/dark-launch",slug:"/tip-basics/dark-launch/data-separation",permalink:"/prodtest-docs/tip-basics/dark-launch/data-separation",draft:!1,tags:[],version:"current",frontMatter:{title:"Data Separation"},sidebar:"tutorialSidebar",previous:{title:"Dark Launch",permalink:"/prodtest-docs/tip-basics/dark-launch/"},next:{title:"Demo Project",permalink:"/prodtest-docs/category/demo-project"}},l={},u=[{value:"Database",id:"database",level:2},{value:"Separate database",id:"separate-database",level:3},{value:"Separate table",id:"separate-table",level:3},{value:"Extend data model",id:"extend-data-model",level:3},{value:"Overview",id:"overview",level:3},{value:"Message Queue",id:"message-queue",level:2},{value:"Separate queue",id:"separate-queue",level:3},{value:"Routing",id:"routing",level:3},{value:"Topics (definition by RabbitMQ)",id:"topics-definition-by-rabbitmq",level:3},{value:"Overview",id:"overview-1",level:3}],p={toc:u};function d(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"As mentioned on the ",(0,o.kt)("a",{parentName:"p",href:"/prodtest-docs/tip-basics/dark-launch/"},"Dark Launch page")," there are different ways an application cal collect and store data. For this guide, we will stick to the ways that are used in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/brdv/prodtest-demo"},"prodtest-demo")," project: a database and a message queue."),(0,o.kt)("h2",{id:"database"},"Database"),(0,o.kt)("p",null,"When storing data in a database in your application, you want to make sure that the data generated by Vnext will not be shown to the user. Therefore, you need to find a way to separate that data from production data. There are various ways to accomplish such a thing. The following three are described in this guide: separate database, separate table and extending the data model."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," If you want a quick overview of the options and the pros and cons, ",(0,o.kt)("a",{parentName:"p",href:"#overview"},"click here"),"!"),(0,o.kt)("h3",{id:"separate-database"},"Separate database"),(0,o.kt)("p",null,"One of the options is to use a separate database for Vnext. Vnext will setup a connection with the separate database and store all generated data in that database. This raises the question; what should you do if your application also needs data from the production database to function?"),(0,o.kt)("p",null,"There are two basic options here; retrieving data directly from the production database or creating and managing a copy of the database. Both options are far from perfect. As retrieving data from a database twice (once for Vnext and once for Vlatest) will double the load on that database, meaning that you also have to double your resources. The second option might seem interesting at first, but think about the fact that you now will have to keep two database up to date all the time. Because if you do not keep your Vnext database up to date with Vlatest, you will most likely get errors on reads or writes because of data missing from the database."),(0,o.kt)("p",null,"This does not mean, however, that this option will never be a valid choice. It will always depend on your application."),(0,o.kt)("h3",{id:"separate-table"},"Separate table"),(0,o.kt)("p",null,"Another option is to use a separate 'shadow' table. This is a table within the same database specifically created and solely used by Vnext. The Vnext application will use the same database for all other requests, but add data only to the specific shadow table(s). That means that you no longer need to keep two separate databases up to date. It does mean that you might still have an extra load on your database, since both Vlatest and Vnext will use (some) of the same tables."),(0,o.kt)("p",null,"Again, it will depend on your application and your needs if this options might be a proper fit."),(0,o.kt)("h3",{id:"extend-data-model"},"Extend data model"),(0,o.kt)("p",null,"The last option that will be discussed is to extend your data model. You will have to create a new field to your model, for example ",(0,o.kt)("inlineCode",{parentName:"p"},"generatedBy")," that specifies by which version of the service the record is produced. You could, for example, use ",(0,o.kt)("inlineCode",{parentName:"p"},"Vlatest")," for your service that responds to the user input, and ",(0,o.kt)("inlineCode",{parentName:"p"},"Vnext")," for the service that is 'in' dark launch. In your code, you can then specify in your queries that you only want to use data that has a specific tag."),(0,o.kt)("p",null,"This option seems quite good. You have little to no extra work, and it is almost the same as a separate table. However, you should consider the cleanliness of your code and database. Since you table will contain data of all possible versions you have and your code/query has to check the version for each request. This is generally considered to be a bad practice."),(0,o.kt)("h3",{id:"overview"},"Overview"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Option"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Pros"),(0,o.kt)("th",{parentName:"tr",align:null},"Cons"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Separate database"),(0,o.kt)("td",{parentName:"tr",align:null},"Create a separate database to be used by Vnext. Could start as a replica."),(0,o.kt)("td",{parentName:"tr",align:null},"Most robust. Lowest risk of pollution"),(0,o.kt)("td",{parentName:"tr",align:null},"Quite complex, possibly expensive.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Separate table"),(0,o.kt)("td",{parentName:"tr",align:null},"Create a separate table to be used by Vnext. (For example TableShadow)"),(0,o.kt)("td",{parentName:"tr",align:null},"Quite simple, low cost."),(0,o.kt)("td",{parentName:"tr",align:null},"Less robust, minor data pollution risk.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Extend data model"),(0,o.kt)("td",{parentName:"tr",align:null},"Extend the existing data model with a new field. For example: ",(0,o.kt)("inlineCode",{parentName:"td"},"generatedBy")," that specifies what is production data, and what is not."),(0,o.kt)("td",{parentName:"tr",align:null},"Cheapest solution, quite simple"),(0,o.kt)("td",{parentName:"tr",align:null},"Not very clean, higher risk of pollution.")))),(0,o.kt)("h2",{id:"message-queue"},"Message Queue"),(0,o.kt)("p",null,"A message queue receives messages from a publisher. A consumer will in turn subscribe to new messages. Depending on the implementation, the messages are or are not deleted from the queue. There are various ways to make sure that certain messages will only be received by certain consumers. The three main options are a separate queue, routing or topics/exchanges."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," If you want a quick overview of the options and the pros and cons, ",(0,o.kt)("a",{parentName:"p",href:"#overview-1"},"click here"),"!"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," this guide uses the technical terms as used by RabbitMQ for queues/topics etc. This may result in different terminology than you are used to. In that case, please consult the ",(0,o.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com/getstarted.html"},"documentation")," of RabbitMQ."),(0,o.kt)("h3",{id:"separate-queue"},"Separate queue"),(0,o.kt)("p",null,"The first and probably most robust solution is to use an entirely different queue for your dark launched service. In this way you will minimize the risk of data pollution and are sure that each specific queue will only contain messages from a specific publisher. The downside of this approach, depending on you queue provider, is that this will likely double the cost in money and/or resources. Since now you have to keep two queues running all the time."),(0,o.kt)("h3",{id:"routing"},"Routing"),(0,o.kt)("p",null,"Routing, for message queues, is a principle that let's specific workers listen to only specific messages. For example, you can append a parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"version")," to each message on the queue whose value could be either ",(0,o.kt)("inlineCode",{parentName:"p"},"Vlatest")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Vnext"),". You can than make sure that the parts of your application that are not in a dark launch, will only listen for messages that contain the version ",(0,o.kt)("inlineCode",{parentName:"p"},"Vlatest"),".\nYou will be able to publish all messages to the same queue, and let you consumers pick what messages they should pay attention to. In this way, you do not have to double all of you resources immediately. You will however see an increase in traffic to you queue, and possibly from your queue as well, depending on you implementation. The downside of this is that you could say that it does pollute you data. Since all messages are placed on the same queue, this queue technically does not conform to the single responsibility principle."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," this guide uses the technical terms as used by RabbitMQ for queues/topics etc. This may result in different terminology than you are used to. In that case, please consult the ",(0,o.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com/getstarted.html"},"documentation")," of RabbitMQ."),(0,o.kt)("h3",{id:"topics-definition-by-rabbitmq"},"Topics (definition by RabbitMQ)"),(0,o.kt)("p",null,"RabbitMQ also describes ",(0,o.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com/tutorials/tutorial-two-dotnet.html"},"topics")," in their documentation. The benefits and costs of topics is considered the same af those when routing is used."),(0,o.kt)("h3",{id:"overview-1"},"Overview"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Option"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Pros"),(0,o.kt)("th",{parentName:"tr",align:null},"Cons"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Separate queue"),(0,o.kt)("td",{parentName:"tr",align:null},"Create a separate queue to be used by Vnext."),(0,o.kt)("td",{parentName:"tr",align:null},"Most robust. No pollution. Simple"),(0,o.kt)("td",{parentName:"tr",align:null},"Possibly expensive.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Routing"),(0,o.kt)("td",{parentName:"tr",align:null},"Add a specific parameter to your message to specify the version of the publisher."),(0,o.kt)("td",{parentName:"tr",align:null},"Cheap. Simple."),(0,o.kt)("td",{parentName:"tr",align:null},"Less robust. Data pollution risk.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Topics"),(0,o.kt)("td",{parentName:"tr",align:null},"Pre- or postfix your message to differentiate the origin."),(0,o.kt)("td",{parentName:"tr",align:null},"Cheap. Simple."),(0,o.kt)("td",{parentName:"tr",align:null},"Less robust. Data pollution risk.")))))}d.isMDXComponent=!0}}]);