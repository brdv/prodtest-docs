"use strict";(self.webpackChunkprodtest=self.webpackChunkprodtest||[]).push([[123],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),l=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return i.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=l(n),u=r,m=h["".concat(c,".").concat(u)]||h[u]||p[u]||a;return n?i.createElement(m,o(o({ref:t},d),{},{components:n})):i.createElement(m,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5086:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var i=n(7462),r=(n(7294),n(3905));const a={title:"Queue Details",sidebar_position:4,slug:"message-queue"},o=void 0,s={unversionedId:"demo/technical-detail/message-queue",id:"demo/technical-detail/message-queue",title:"Queue Details",description:"This page describes how the RabbitMQ message queue is implemented in the demo project. Since there is already quite some documentation about the queue on this documentation site, this page will limit to how RabbitMQ is implemented in the project.",source:"@site/docs/demo/technical-detail/message-queue.md",sourceDirName:"demo/technical-detail",slug:"/demo/technical-detail/message-queue",permalink:"/prodtest-docs/demo/technical-detail/message-queue",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Queue Details",sidebar_position:4,slug:"message-queue"},sidebar:"tutorialSidebar",previous:{title:"KitchenService",permalink:"/prodtest-docs/demo/technical-detail/kitchen-service"},next:{title:"Data Separation",permalink:"/prodtest-docs/demo/technical-detail/data-separation"}},c={},l=[{value:"RabbitMQ",id:"rabbitmq",level:2},{value:"Order service implementation",id:"order-service-implementation",level:3},{value:"Kitchen service implementation",id:"kitchen-service-implementation",level:3}],d={toc:l};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,i.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This page describes how the RabbitMQ message queue is implemented in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/brdv/prodtest-demo"},"demo project"),". Since there is already quite some documentation about the queue on this documentation site, this page will limit to how RabbitMQ is implemented in the project."),(0,r.kt)("h2",{id:"rabbitmq"},"RabbitMQ"),(0,r.kt)("p",null,"The message queue provider we use for the demo project is ",(0,r.kt)("a",{parentName:"p",href:"https://rabbitmq.com/#getstarted"},"RabbitMQ"),". It is used to allow communication between the order service and the kitchen service. Therefore, an implementation is used in both projects."),(0,r.kt)("p",null,"To interact with RabbitMQ instances, we use the official ",(0,r.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/rabbitmq.client/"},"RabbitMQ nuget package"),". It is added to both the order and kitchen service."),(0,r.kt)("h3",{id:"order-service-implementation"},"Order service implementation"),(0,r.kt)("p",null,"The order service interacts with RabbitMQ via the RabbitMQService. This is a simple wrapper around RabbitMQ's functionality. The complete service can be found below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'public class RabbitMQService : IRabbitMQService\n{\n    public void PublishEvent(string hostname, string event, string exchange)\n    {\n        var factory = new ConnectionFactory() { HostName = hostname };\n        using (var connection = factory.CreateConnection())\n        using (var channel = connection.CreateModel())\n        {\n            channel.ExchangeDeclare(exchange, ExchangeType.Fanout);\n\n            var body = Encoding.UTF8.GetBytes(event);\n\n            channel.BasicPublish(exchange: exchange,\n                                 routingKey: "",\n                                 basicProperties: null,\n                                 body: body);\n        }\n    }\n}\n')),(0,r.kt)("p",null,"As you can see, it is quite simple and only has one method: ",(0,r.kt)("inlineCode",{parentName:"p"},"PublishEvent"),". This method takes three arguments: the hostname of the RabbitMQ instance, the event to publish and the exchange to publish to. (Note we use exchanges in stead of queues for publishing, more about that ",(0,r.kt)("a",{parentName:"p",href:"/prodtest-docs/demo/examples/internal-dl"},"here"),".)\nThe method creates a new Connection factory with the given hostname, from that factory it creates a connection en thereof a channel. All of these items are disposables, therefore using the ",(0,r.kt)("inlineCode",{parentName:"p"},"using")," statement.\nIn order to safely publish events on the queue, we have to encode it as UTF8 and transfer it into a Byte array (see line 11)."),(0,r.kt)("p",null,"The RabbitMQService is injected into the OrderService as follows:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"DI RabbitMQService",src:n(8272).Z,width:"1942",height:"876"})),(0,r.kt)("p",null,"The OrderService then uses the RabbitMQService in the PublishNewOrder method, that is called from another method in the same class. See the PublishNewOrder function below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"showLineNumbers",showLineNumbers:!0},'private void PublishNewOrder(OrderModel order)\n{\n    var serializedOrder = JsonSerializer.Serialize(order);\n    var versionTag = _configuration["DL_INTERNAL_TAG"];\n\n    _rmqService.PublishEvent(_configuration["RMQ_HOST"], serializedOrder, $"dl-exchange-{versionTag}");\n}\n')),(0,r.kt)("p",null,"As mentioned before, the RabbitMQService is injected into the OrderService with dependency injection (see ",(0,r.kt)("a",{parentName:"p",href:"/prodtest-docs/demo/technical-detail/order-service#dependencies"},"here"),"). This code snipped serializes the order into a Json string and calls the ",(0,r.kt)("inlineCode",{parentName:"p"},"PublishEvent")," method on the RabbitMQService, providing all relevant parameters."),(0,r.kt)("p",null,"Note: the versionTag is part of the in ",(0,r.kt)("inlineCode",{parentName:"p"},"appsettings.json")," provided variables. It is used to specify what exchange to publish the messages to. More about this ",(0,r.kt)("a",{parentName:"p",href:"/prodtest-docs/demo/technical-detail/data-separation#message-queue"},"here"),"."),(0,r.kt)("h3",{id:"kitchen-service-implementation"},"Kitchen service implementation"),(0,r.kt)("p",null,"The kitchen service consumes new messages from RabbitMQ. It does so by binding a new queue to the exchange that the order service publishes messages to. A good description thereof can be found ",(0,r.kt)("a",{parentName:"p",href:"/prodtest-docs/demo/examples/internal-dl#subscribing-to-messages"},"here"),"."))}p.isMDXComponent=!0},8272:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/di-example-order-service-754aa993bc61307a15c13c767d104e90.png"}}]);