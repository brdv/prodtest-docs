"use strict";(self.webpackChunkprodtest=self.webpackChunkprodtest||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Prodtest","href":"/prodtest-docs/","docId":"intro"},{"type":"category","label":"Testing in production","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Dark Launch","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Data Separation","href":"/prodtest-docs/tip-basics/dark-launch/data-separation","docId":"tip-basics/dark-launch/data-separation"}],"href":"/prodtest-docs/tip-basics/dark-launch/"}],"href":"/prodtest-docs/category/testing-in-production"},{"type":"category","label":"Demo Project","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Project Structure","href":"/prodtest-docs/demo/project-structure/","docId":"demo/project-structure/index"},{"type":"category","label":"Technical detail","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"OrderService","href":"/prodtest-docs/demo/technical-detail/order-service","docId":"demo/technical-detail/order-service"},{"type":"link","label":"KitchenService","href":"/prodtest-docs/demo/technical-detail/kitchen-service","docId":"demo/technical-detail/kitchen-service"},{"type":"link","label":"Queue Details","href":"/prodtest-docs/demo/technical-detail/message-queue","docId":"demo/technical-detail/message-queue"},{"type":"link","label":"Data Separation","href":"/prodtest-docs/demo/technical-detail/data-separation","docId":"demo/technical-detail/data-separation"},{"type":"link","label":"Pipelines","href":"/prodtest-docs/demo/technical-detail/pipelines","docId":"demo/technical-detail/pipelines"},{"type":"link","label":"Testing the project","href":"/prodtest-docs/demo/technical-detail/testing","docId":"demo/technical-detail/testing"},{"type":"link","label":"README copy","href":"/prodtest-docs/demo/technical-detail/README-copy","docId":"demo/technical-detail/README-copy"}],"href":"/prodtest-docs/demo/technical-detail/"},{"type":"category","label":"Examples","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"External Dark Launch","href":"/prodtest-docs/demo/examples/external-dl","docId":"demo/examples/external-dl"},{"type":"link","label":"Internal Dark Launch","href":"/prodtest-docs/demo/examples/internal-dl","docId":"demo/examples/internal-dl"}],"href":"/prodtest-docs/category/examples"}],"href":"/prodtest-docs/category/demo-project"}]},"docs":{"demo/examples/external-dl":{"id":"demo/examples/external-dl","title":"External Dark Launch","description":"As described on the dark launch page, an external dark launch means that the request originates from outside you infrastructure (e.g. cluster). This page shows an example implementation of an external dark launch.","sidebar":"tutorialSidebar"},"demo/examples/internal-dl":{"id":"demo/examples/internal-dl","title":"Internal Dark Launch","description":"As described on the dark launch page, an internal dark launch is a dark launch that happens between two clusters. In this case, the traffic does not pass through a proxy. The two services have another way of communication.","sidebar":"tutorialSidebar"},"demo/project-structure/index":{"id":"demo/project-structure/index","title":"Project Structure","description":"This pages shows the project structure and describes what files to find where.","sidebar":"tutorialSidebar"},"demo/technical-detail/data-separation":{"id":"demo/technical-detail/data-separation","title":"Data Separation","description":"We have talked about ways to separate data when using a dark launch over here. On this page we will look at how data separation is implemented in the prodtest-demo project\'s dark launch.","sidebar":"tutorialSidebar"},"demo/technical-detail/index":{"id":"demo/technical-detail/index","title":"Technical detail","description":"This page gives an overview of the components of the demo project.","sidebar":"tutorialSidebar"},"demo/technical-detail/kitchen-service":{"id":"demo/technical-detail/kitchen-service","title":"KitchenService","description":"The kitchen service consumes new order events that are published on the message queue. Once an order is published, it will handle the order and store a OrderHandled object into a database.","sidebar":"tutorialSidebar"},"demo/technical-detail/message-queue":{"id":"demo/technical-detail/message-queue","title":"Queue Details","description":"This page describes how the RabbitMQ message queue is implemented in the demo project. Since there is already quite some documentation about the queue on this documentation site, this page will limit to how RabbitMQ is implemented in the project.","sidebar":"tutorialSidebar"},"demo/technical-detail/order-service":{"id":"demo/technical-detail/order-service","title":"OrderService","description":"The order service is the first service that will be called by the proxy on incoming requests. This page describes how the service is designed and implemented.","sidebar":"tutorialSidebar"},"demo/technical-detail/pipelines":{"id":"demo/technical-detail/pipelines","title":"Pipelines","description":"The prodtest-demo repository uses pipelines to do a few automatic checks on the codebase. This page describes what pipelines are used, why and how they are implemented.","sidebar":"tutorialSidebar"},"demo/technical-detail/README-copy":{"id":"demo/technical-detail/README-copy","title":"README copy","description":"This page is an exact copy of the README.md file found in the prodtest-demo project.","sidebar":"tutorialSidebar"},"demo/technical-detail/testing":{"id":"demo/technical-detail/testing","title":"Testing the project","description":"This page describes the way the project is tested. Two types of testing have been applied. Software testing using unit tests and Mutation testing using Stryker.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Prodtest","description":"The testing in production knowledge framework","sidebar":"tutorialSidebar"},"tip-basics/dark-launch/dark-launch":{"id":"tip-basics/dark-launch/dark-launch","title":"Dark Launch","description":"This page describes a dark launch, also known as shadow release, dark mirror release or dark traffic test but at prodtest we call it a dark launch. A dark launch is a deployment or testing strategy for testing a newer version of a service or piece of software. The main goal of a dark launch is to mirror (a subset of) incoming production traffic to the new service but discarding the response. This allows you to monitor the functionality and performance of the service while under a real-world production load without taking the risk of exposing your users to it.","sidebar":"tutorialSidebar"},"tip-basics/dark-launch/data-separation":{"id":"tip-basics/dark-launch/data-separation","title":"Data Separation","description":"As mentioned on the Dark Launch page there are different ways an application cal collect and store data. For this guide, we will stick to the ways that are used in the prodtest-demo project: a database and a message queue.","sidebar":"tutorialSidebar"}}}')}}]);